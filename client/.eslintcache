[{"C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\index.js":"1","C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\App.js":"2","C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\components\\main.js":"3","C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\components\\analaysis.js":"4","C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\components\\intro.js":"5"},{"size":205,"mtime":1610156688370,"results":"6","hashOfConfig":"7"},{"size":845,"mtime":1610210995228,"results":"8","hashOfConfig":"7"},{"size":9770,"mtime":1610229050878,"results":"9","hashOfConfig":"7"},{"size":985,"mtime":1610271483145,"results":"10","hashOfConfig":"7"},{"size":7221,"mtime":1610302112002,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ibad77",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\index.js",[],"C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\App.js",[],"C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\components\\main.js",["25"],"import \"../styles/styles.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport {ReactComponent as Stop} from \"../assets/stop.svg\";\r\nimport {ReactComponent as Play} from \"../assets/play.svg\";\r\n\r\nvar remaining_Timer, study_Timer, chore_Timer, break_Timer;\r\n\r\nfunction Main({ setPage, userInput, setInsights }) {\r\n  const [choreButton, setChoreButton] = useState(true);\r\n  const [breakButton, setBreakButton] = useState(true);\r\n\r\n  const remainingTimeHour = useRef();\r\n  const remainingTimeMinute = useRef();\r\n  const remainingTimeSecond = useRef();\r\n  const studyTimeHour = useRef();\r\n  const studyTimeMinute = useRef();\r\n  const studyTimeSecond = useRef();\r\n  const choreTimeHour = useRef();\r\n  const choreTimeMinute = useRef();\r\n  const choreTimeSecond = useRef();\r\n  const breakTimeHour = useRef();\r\n  const breakTimeMinute = useRef();\r\n  const breakTimeSecond = useRef();\r\n\r\n  // let remaining_Timer, study_Timer, chore_Timer, break_Timer;\r\n\r\n  function startTimer(bool) {\r\n    if(bool) {\r\n      remaining_Timer = setInterval(() => {\r\n        let hours = parseInt(remainingTimeHour.current.innerText);\r\n        let minutes = parseInt(remainingTimeMinute.current.innerText);\r\n        let seconds = parseInt(remainingTimeSecond.current.innerText);\r\n        if (seconds === 0){ // if 60s is done, subtract 1 from minute and add another 59s\r\n          if(minutes === 0){ // if minutes are done, subtract 1 from hour and add another 59 minutes\r\n            if(hours === 0){ // hours is 0, minutes is 0, seconds is 0 \r\n              clearInterval(remaining_Timer);\r\n              clearInterval(study_Timer);\r\n              let array1 = [parseInt(studyTimeHour.current.innerText), parseInt(studyTimeMinute.current.innerText), parseInt(studyTimeSecond.current.innerText)];\r\n              let array2 = [parseInt(choreTimeHour.current.innerText), parseInt(choreTimeMinute.current.innerText), parseInt(choreTimeSecond.current.innerText)];\r\n              let array3 = [parseInt(breakTimeHour.current.innerText), parseInt(breakTimeMinute.current.innerText), parseInt(breakTimeSecond.current.innerText)];\r\n              setInsights([array1,array2,array3]);\r\n              setPage([false,false,true]);\r\n            } else { // there are remaining hours\r\n              remainingTimeHour.current.innerText = hours - 1;\r\n              remainingTimeMinute.current.innerText = 59;\r\n              remainingTimeSecond.current.innerText = 59;\r\n            }\r\n          } else { // there are remaining minutes\r\n            remainingTimeMinute.current.innerText = minutes - 1;\r\n            remainingTimeSecond.current.innerText = 59;\r\n          }\r\n        } else { // there are remaining seconds\r\n          remainingTimeSecond.current.innerText = seconds - 1;\r\n        }\r\n      }, 1000); //runs every second\r\n    }\r\n    else {\r\n      clearInterval(remaining_Timer);\r\n    }\r\n  }\r\n\r\n  function studyTimer(bool) {\r\n    if(bool) {\r\n      study_Timer = setInterval(() => {\r\n        let hours = parseInt(studyTimeHour.current.innerText);\r\n        let minutes = parseInt(studyTimeMinute.current.innerText);\r\n        let seconds = parseInt(studyTimeSecond.current.innerText);\r\n        if (seconds === 59){ // if 60s is done, subtract 1 from minute and add another 59s\r\n          if(minutes === 59){ // if minutes are done, subtract 1 from hour and add another 59 minutes\r\n              studyTimeHour.current.innerText = hours + 1;\r\n              studyTimeMinute.current.innerText = 0;\r\n              studyTimeSecond.current.innerText = 0;\r\n          } else { // there are remaining minutes\r\n            studyTimeMinute.current.innerText = minutes + 1;\r\n            studyTimeSecond.current.innerText = 0;\r\n          }\r\n        } else { // there are remaining seconds\r\n          studyTimeSecond.current.innerText = seconds + 1;\r\n        }\r\n      }, 1000); //runs every second\r\n    }\r\n    else{\r\n      clearInterval(study_Timer);\r\n    }\r\n  }\r\n\r\n  function choreTimer(bool) {\r\n    if(bool) {\r\n      chore_Timer = setInterval(() => {\r\n        let hours = parseInt(choreTimeHour.current.innerText);\r\n        let minutes = parseInt(choreTimeMinute.current.innerText);\r\n        let seconds = parseInt(choreTimeSecond.current.innerText);\r\n        if (seconds === 59){ // if 60s is done, subtract 1 from minute and add another 59s\r\n          if(minutes === 59){ // if minutes are done, subtract 1 from hour and add another 59 minutes\r\n            choreTimeHour.current.innerText = hours + 1;\r\n            choreTimeMinute.current.innerText = 0;\r\n            choreTimeSecond.current.innerText = 0;\r\n          } else { // there are remaining minutes\r\n            choreTimeMinute.current.innerText = minutes + 1;\r\n            choreTimeSecond.current.innerText = 0;\r\n          }\r\n        } else { // there are remaining seconds\r\n          choreTimeSecond.current.innerText = seconds + 1;\r\n        }\r\n      }, 1000); //runs every second\r\n    }\r\n    else {\r\n      clearInterval(chore_Timer);\r\n    }\r\n  }\r\n\r\n  function breakTimer(bool) {\r\n    if(bool) {\r\n      break_Timer = setInterval(() => {\r\n        let hours = parseInt(breakTimeHour.current.innerText);\r\n        let minutes = parseInt(breakTimeMinute.current.innerText);\r\n        let seconds = parseInt(breakTimeSecond.current.innerText);\r\n        if (seconds === 59){ // if 60s is done, subtract 1 from minute and add another 59s\r\n          if(minutes === 59){ // if minutes are done, subtract 1 from hour and add another 59 minutes\r\n            breakTimeHour.current.innerText = hours + 1;\r\n            breakTimeMinute.current.innerText = 0;\r\n            breakTimeSecond.current.innerText = 0;\r\n          } else { // there are remaining minutes\r\n            breakTimeMinute.current.innerText = minutes + 1;\r\n            breakTimeSecond.current.innerText = 0;\r\n          }\r\n        } else { // there are remaining seconds\r\n          breakTimeSecond.current.innerText = seconds + 1;\r\n        }\r\n      }, 1000); //runs every second\r\n    }\r\n    else {\r\n      clearInterval(break_Timer);\r\n    }\r\n  }\r\n\r\n  function startChores() {\r\n    setChoreButton(false);\r\n    setBreakButton(true);\r\n    startTimer(false);\r\n    studyTimer(false);\r\n    breakTimer(false);\r\n    choreTimer(true);\r\n  }\r\n\r\n  function stopChores() {\r\n    setChoreButton(true);\r\n    startTimer(true);\r\n    studyTimer(true);\r\n    breakTimer(false);\r\n    choreTimer(false);\r\n  }\r\n\r\n  function startBreak() {\r\n    setChoreButton(true);\r\n    setBreakButton(false);\r\n    startTimer(false);\r\n    studyTimer(false);\r\n    breakTimer(true);\r\n    choreTimer(false);\r\n  }\r\n\r\n  function stopBreak() {\r\n    setBreakButton(true);\r\n    startTimer(true);\r\n    studyTimer(true);\r\n    breakTimer(false);\r\n    choreTimer(false);\r\n  }\r\n\r\n  function leaveMain() {\r\n    startTimer(false);\r\n    studyTimer(false);\r\n    breakTimer(false);\r\n    choreTimer(false);\r\n    let array1 = [parseInt(studyTimeHour.current.innerText), parseInt(studyTimeMinute.current.innerText), parseInt(studyTimeSecond.current.innerText)];\r\n    let array2 = [parseInt(choreTimeHour.current.innerText), parseInt(choreTimeMinute.current.innerText), parseInt(choreTimeSecond.current.innerText)];\r\n    let array3 = [parseInt(breakTimeHour.current.innerText), parseInt(breakTimeMinute.current.innerText), parseInt(breakTimeSecond.current.innerText)];\r\n    setInsights([array1,array2,array3]);\r\n    setPage([false,false,true]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    remainingTimeHour.current.innerText = userInput[0];\r\n    remainingTimeMinute.current.innerText = userInput[1];\r\n    remainingTimeSecond.current.innerText = userInput[2];\r\n    studyTimeHour.current.innerText = 0;\r\n    studyTimeMinute.current.innerText = 0;\r\n    studyTimeSecond.current.innerText = 0;\r\n    choreTimeHour.current.innerText = 0;\r\n    choreTimeMinute.current.innerText = 0;\r\n    choreTimeSecond.current.innerText = 0;\r\n    breakTimeHour.current.innerText = 0;\r\n    breakTimeMinute.current.innerText = 0;\r\n    breakTimeSecond.current.innerText = 0;\r\n    startTimer(true);\r\n    studyTimer(true);\r\n  }, []);\r\n\r\n  return ( //TODO: make ui look better to match mockup design\r\n    <div className=\"main\">\r\n      <div className=\"time-remaining\">\r\n        <div className=\"time-column\">\r\n          <p className=\"title-time\" ref={remainingTimeHour}></p>\r\n          <p>Hours</p>\r\n        </div>\r\n        <p className=\"colon\">:</p>\r\n        <div className=\"time-column\">\r\n          <p className=\"title-time\" ref={remainingTimeMinute}></p>\r\n          <p>Minutes</p>\r\n        </div>\r\n        <p className=\"colon\">:</p>\r\n        <div className=\"time-column\">\r\n          <p className=\"title-time\" ref={remainingTimeSecond}></p>\r\n          <p>Seconds</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"alt-time\">\r\n        <p><strong>Study time</strong> - <span ref={studyTimeHour}></span> : <span ref={studyTimeMinute}></span> : <span ref={studyTimeSecond}></span></p>\r\n      </div>\r\n      <div className=\"alt-time\">\r\n        <p><strong>Chores</strong> - <span ref={choreTimeHour}></span> : <span ref={choreTimeMinute}></span> : <span ref={choreTimeSecond}></span></p>\r\n        {\r\n          choreButton ?\r\n            <Play className=\"icon\" onClick={() => startChores()} />\r\n          :\r\n            <Stop className=\"icon\" onClick={() => stopChores()} />\r\n        }\r\n      </div>\r\n      <div className=\"alt-time\">\r\n        <p><strong>Break</strong> - <span ref={breakTimeHour}></span> : <span ref={breakTimeMinute}></span> : <span ref={breakTimeSecond}></span></p>\r\n        {\r\n          breakButton ?\r\n            <Play className=\"icon\" onClick={() => startBreak()} />\r\n          :\r\n            <Stop className=\"icon\" onClick={() => stopBreak()} />\r\n        }\r\n      </div>\r\n      <Stop className=\"continue\" onClick={() => leaveMain()}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\components\\analaysis.js",["26"],"import '../styles/styles.css';\r\nimport {ReactComponent as Replay} from \"../assets/replay.svg\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction Analysis({ setPage, insights }) {\r\n    return (\r\n      <div className=\"analysis\">\r\n          <p className=\"title\">Results</p>\r\n          <div className=\"results\">\r\n            <div className=\"results-row\">\r\n              <p>Study time:</p>\r\n              <p>{insights[0][0]}:{insights[0][1]}:{insights[0][2]}</p>\r\n            </div>\r\n            <div className=\"results-row\">\r\n              <p>Chores:</p>\r\n              <p>{insights[1][0]}:{insights[1][1]}:{insights[1][2]}</p>\r\n            </div>\r\n            <div className=\"results-row\">\r\n              <p>Break:</p>\r\n              <p>{insights[2][0]}:{insights[2][1]}:{insights[2][2]}</p>\r\n            </div>\r\n          </div>\r\n          <Replay onClick = {() => setPage([true, false, false])} />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Analysis;\r\n  \r\n  //calculate the insights","C:\\Users\\Edward\\Documents\\GitHub\\productivity-timer\\client\\src\\components\\intro.js",["27"],"import { useRef, useState, useEffect } from \"react\";\r\nimport '../styles/styles.css';\r\nimport {ReactComponent as Done} from \"../assets/done.svg\";\r\n\r\nconst electron = window.require('electron');\r\nconst ipcRenderer = electron.ipcRenderer;\r\n\r\nfunction Intro({ setPage, setUserInput }) {\r\n  let temp = [];\r\n  const [preset, setPreset] = useState([0,0,0]);\r\n\r\n  const wheel1 = useRef();\r\n  const wheel2 = useRef();\r\n  const wheel3 = useRef();\r\n  const var_11 = useRef();\r\n  const var_12 = useRef();\r\n  const var_21 = useRef();\r\n  const var_22 = useRef();\r\n  const var_31 = useRef();\r\n  const var_32 = useRef();\r\n  const buttonRef = useRef();\r\n\r\n  useEffect(() => {\r\n    let array = ipcRenderer.sendSync('load-time');\r\n    setPreset(array);\r\n    temp = array;\r\n    if(array[0] === 0) {\r\n      var_11.current.innerText = 23;\r\n      var_12.current.innerText = array[0] + 1;\r\n    }\r\n    else if (array[0] === 23) {\r\n      var_11.current.innerText = array[0] - 1;\r\n      var_12.current.innerText = 0;\r\n    }\r\n    else {\r\n      var_11.current.innerText = array[0] - 1;\r\n      var_12.current.innerText = array[0] + 1;\r\n    }\r\n    if(array[1] === 0) {\r\n      var_21.current.innerText = 59;\r\n      var_22.current.innerText = array[1] + 1;\r\n    }\r\n    else if (array[1] === 59) {\r\n      var_21.current.innerText = array[1] - 1;\r\n      var_22.current.innerText = 0;\r\n    }\r\n    else {\r\n      var_21.current.innerText = array[1] - 1;\r\n      var_22.current.innerText = array[1] + 1;\r\n    }\r\n    if(array[2] === 0) {\r\n      var_31.current.innerText = 59;\r\n      var_32.current.innerText = array[2] + 1;\r\n    }\r\n    else if (array[2] === 59) {\r\n      var_31.current.innerText = array[2] - 1;\r\n      var_32.current.innerText = 0;\r\n    }\r\n    else {\r\n      var_31.current.innerText = array[2] - 1;\r\n      var_32.current.innerText = array[2] + 1;\r\n    }\r\n\r\n    wheel1.current.addEventListener('wheel', (event) => {\r\n      if(event.deltaY < 0) {\r\n        if(temp[0] === 23) {\r\n          setOne(0);\r\n        }\r\n        else {\r\n          setOne(temp[0] + 1);\r\n        }\r\n      }\r\n      else {\r\n        if(temp[0] === 0) {\r\n          setOne(23);\r\n        }\r\n        else {\r\n          setOne(temp[0] - 1);\r\n        }\r\n      }\r\n    });\r\n    var_11.current.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      if(temp[0] === 0) {\r\n        setOne(23);\r\n      }\r\n      else {\r\n        setOne(temp[0] - 1);\r\n      }\r\n    });\r\n    var_12.current.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      if(temp[0] === 23) {\r\n        setOne(0);\r\n      }\r\n      else {\r\n        setOne(temp[0] + 1);\r\n      }\r\n    });\r\n    wheel2.current.addEventListener('wheel', (event) => {\r\n      if(event.deltaY < 0) {\r\n        if(temp[1] === 59) {\r\n          setTwo(0)\r\n        }\r\n        else {\r\n          setTwo(temp[1] + 1);\r\n        }\r\n      }\r\n      else {\r\n        if(temp[1] === 0) {\r\n          setTwo(59);\r\n        }\r\n        else {\r\n          setTwo(temp[1] - 1);\r\n        }\r\n      }\r\n    });\r\n    var_21.current.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      if(temp[1] === 0) {\r\n        setTwo(59);\r\n      }\r\n      else {\r\n        setTwo(temp[1] - 1);\r\n      }\r\n    });\r\n    var_22.current.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      if(temp[1] === 59) {\r\n        setTwo(0);\r\n      }\r\n      else {\r\n        setTwo(temp[1] + 1);\r\n      }\r\n    });\r\n    wheel3.current.addEventListener('wheel', (event) => {\r\n      if(event.deltaY < 0) {\r\n        if(temp[2] === 59) {\r\n          setThree(0);\r\n        }\r\n        else {\r\n          setThree(temp[2] + 1);\r\n        }\r\n      }\r\n      else {\r\n        if(temp[2] === 0) {\r\n          setThree(59);\r\n        }\r\n        else {\r\n          setThree(temp[2] - 1);\r\n        }\r\n      }\r\n    });\r\n    var_31.current.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      if(temp[2] === 0) {\r\n        setThree(59);\r\n      }\r\n      else {\r\n        setThree(temp[2] - 1);\r\n      }\r\n    });\r\n    var_32.current.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      if(temp[2] === 59) {\r\n        setThree(0);\r\n      }\r\n      else {\r\n        setThree(temp[2] + 1);\r\n      }\r\n    });\r\n    buttonRef.current.addEventListener('click', (event) => {\r\n      ipcRenderer.sendSync('save-time', [temp[0], temp[1], temp[2]]);\r\n      setUserInput([temp[0],temp[1],temp[2]]);\r\n      setPage([false, true, false]);\r\n    });\r\n  }, []);\r\n\r\n  function setOne(number){\r\n    let tempPreset = temp;\r\n    tempPreset[0] = number;\r\n    switch (tempPreset[0]) {\r\n      case 0:\r\n        var_11.current.innerText = 23;\r\n        var_12.current.innerText = tempPreset[0] + 1;\r\n        break;\r\n      case 23:\r\n        var_11.current.innerText = tempPreset[0] - 1;\r\n        var_12.current.innerText = 0;\r\n        break;\r\n      default:\r\n        var_11.current.innerText = tempPreset[0] - 1;\r\n        var_12.current.innerText = tempPreset[0] + 1;\r\n    }\r\n    setPreset([tempPreset[0],tempPreset[1],tempPreset[2]]);\r\n    temp = tempPreset;\r\n  }\r\n\r\n  function setTwo(number){\r\n    let tempPreset = temp;\r\n    tempPreset[1] = number;\r\n    switch (tempPreset[1]) {\r\n      case 0:\r\n        var_21.current.innerText = 59;\r\n        var_22.current.innerText = tempPreset[1] + 1;\r\n        break;\r\n      case 59:\r\n        var_21.current.innerText = tempPreset[1] - 1;\r\n        var_22.current.innerText = 0;\r\n        break;\r\n      default:\r\n        var_21.current.innerText = tempPreset[1] - 1;\r\n        var_22.current.innerText = tempPreset[1] + 1;\r\n    }\r\n    setPreset([tempPreset[0],tempPreset[1],tempPreset[2]]);\r\n    temp = tempPreset;\r\n  }\r\n\r\n  function setThree(number){\r\n    let tempPreset = temp;\r\n    tempPreset[2] = number;\r\n    switch (tempPreset[2]) {\r\n      case 0:\r\n        var_31.current.innerText = 59;\r\n        var_32.current.innerText = tempPreset[2] + 1;\r\n        break;\r\n      case 59:\r\n        var_31.current.innerText = tempPreset[2] - 1;\r\n        var_32.current.innerText = 0;\r\n        break;\r\n      default:\r\n        var_31.current.innerText = tempPreset[2] - 1;\r\n        var_32.current.innerText = tempPreset[2] + 1;\r\n    }\r\n    setPreset([tempPreset[0],tempPreset[1],tempPreset[2]]);\r\n    temp = tempPreset;\r\n  }\r\n\r\n  return (\r\n    <div className=\"intro\">\r\n      <p className=\"title\">How long do you want to study for?</p>\r\n      <div className=\"timeWheel\">\r\n        <div className=\"scroll\" ref={wheel1}>\r\n          <p ref={var_11} className=\"pointer\"></p>\r\n          <p className=\"active\">{preset[0]}</p>\r\n          <p ref={var_12} className=\"pointer\"></p>\r\n          <p>Hours</p>\r\n        </div>\r\n        <div className=\"scroll\" ref={wheel2}>\r\n          <p ref={var_21} className=\"pointer\"></p>\r\n          <p className=\"active\">{preset[1]}</p>\r\n          <p ref={var_22} className=\"pointer\"></p>\r\n          <p>Minutes</p>\r\n        </div>\r\n        <div className=\"scroll\" ref={wheel3}>\r\n          <p ref={var_31} className=\"pointer\"></p>\r\n          <p className=\"active\">{preset[2]}</p>\r\n          <p ref={var_32} className=\"pointer\"></p>\r\n          <p>Seconds</p>\r\n        </div>\r\n      </div>\r\n      <Done className=\"button\" ref={buttonRef} />\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default Intro;",{"ruleId":"28","severity":1,"message":"29","line":198,"column":6,"nodeType":"30","endLine":198,"endColumn":8,"suggestions":"31"},{"ruleId":"32","severity":1,"message":"33","line":3,"column":10,"nodeType":"34","messageId":"35","endLine":3,"endColumn":19},{"ruleId":"28","severity":1,"message":"36","line":26,"column":12,"nodeType":"34","endLine":26,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'startTimer' and 'userInput'. Either include them or remove the dependency array.","ArrayExpression",["37"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","Assignments to the 'temp' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",{"desc":"38","fix":"39"},"Update the dependencies array to be: [startTimer, userInput]",{"range":"40","text":"41"},[8000,8002],"[startTimer, userInput]"]